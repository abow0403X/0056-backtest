"""Run a full parameter grid search for 0056 backtesting.

This script loads the provided 0056 historical data from ``0056.xlsx``,
enumerates all combinations of the user‑specified strategy parameters and
evaluates each with the backtesting engine defined in ``backtest.py``.
For each parameter set the win rate and total profit are recorded.  The
results are written to three separate Excel files:

* ``0056_backtest_all.xlsx`` – a sheet containing every tested
  combination.  Columns include the win rate, total profit and the
  corresponding strategy parameters.
* ``0056_backtest_top10.xlsx`` – the ten parameter sets with the
  highest win rates (ties broken by total profit).
* ``0056_backtest_best_details.xlsx`` – a sheet listing every trade
  generated by the single best parameter set (the first row of the top
  results).  Columns include the buy date, sell date, prices, number of
  units, cost, revenue and profit for each completed trade.

To execute the grid search simply run this module directly with Python::

    python backtester/run_grid.py

The script may take several minutes to complete as it evaluates over
300 000 parameter combinations.  Progress is printed periodically to
standard output.
"""

import pandas as pd

from backtester.backtest import (
    BacktestParameters,
    compute_indicators,
    enumerate_parameter_grid,
    export_results_to_excel,
    load_data,
    backtest,
)


def main() -> None:
    """Execute the full grid search and export results to Excel files."""
    # Load historical price data from the provided Excel file.  The file must
    # reside in the working directory or be accessible via an absolute path.
    data_path = "0056.xlsx"
    df = load_data(data_path)

    # Define the parameter ranges exactly as specified by the user.  Each
    # entry corresponds to a field on the ``BacktestParameters`` dataclass
    # (except for ``max_units`` and ``initial_capital``, which remain
    # constant).  Booleans are represented by Python True/False values.
    param_ranges = {
        "buy_kd_upper": [70, 75, 80, 85, 90, 95],
        "buy_rsi_upper": [65, 70, 75, 80, 85, 90],
        "sell_kd_lower": [5, 10, 15, 20, 25, 30],
        "sell_rsi_lower": [10, 15, 20, 25, 30, 35],
        "sell_price_above_avg": [True, False],
        "enable_ma_filter": [True, False],
        "kd_period": [9, 12, 15, 18, 21],
        "kd_smooth": [3, 6, 9],
        "allow_loss_sell": [True, False],
        "buy_units_each_time": [1, 2],
    }

    # Perform the parameter sweep.  This returns a list of dictionaries
    # containing the win rate, total profit and the corresponding parameter
    # values.  The enumeration caches indicator computations for each
    # (kd_period, kd_smooth) pair to improve performance.
    print("Enumerating parameter grid… this may take a few minutes.")
    results = enumerate_parameter_grid(df, param_ranges)

    # Convert results to a DataFrame for easy sorting and selection.  Sort
    # primarily by win rate (descending) and secondarily by total profit
    # (descending).  Pick the best row as the first entry of this sorted
    # DataFrame.
    results_df = pd.DataFrame(results)
    sorted_df = results_df.sort_values(
        by=["win_rate", "total_profit"], ascending=[False, False]
    ).reset_index(drop=True)
    best_row = sorted_df.iloc[0]

    # Build a BacktestParameters instance from the best row.  The
    # ``BacktestParameters`` constructor expects keyword arguments matching
    # the parameter names.  ``max_units`` and ``initial_capital`` remain at
    # their default values (10 units and 400 000 currency units
    # respectively).
    best_params = BacktestParameters(
        buy_kd_upper=float(best_row["buy_kd_upper"]),
        buy_rsi_upper=float(best_row["buy_rsi_upper"]),
        sell_kd_lower=float(best_row["sell_kd_lower"]),
        sell_rsi_lower=float(best_row["sell_rsi_lower"]),
        sell_price_above_avg=bool(best_row["sell_price_above_avg"]),
        enable_ma_filter=bool(best_row["enable_ma_filter"]),
        kd_period=int(best_row["kd_period"]),
        kd_smooth=int(best_row["kd_smooth"]),
        allow_loss_sell=bool(best_row["allow_loss_sell"]),
        buy_units_each_time=int(best_row["buy_units_each_time"]),
    )

    # Compute indicators and run a backtest for the best parameter set.  The
    # returned trade list contains dictionaries capturing the details of
    # every buy/sell pair.  Convert this list to a DataFrame for easy
    # export.  If there are no trades the DataFrame will be empty.
    ind_df = compute_indicators(df, best_params.kd_period, best_params.kd_smooth)
    _, _, trades = backtest(ind_df, best_params)
    trades_df = pd.DataFrame(trades)

    # Export all results, top 10 results and the best trade details.  The
    # ``export_results_to_excel`` helper returns the filenames of the
    # generated Excel files.  They are saved in the current working
    # directory with the prefix ``0056_backtest``.
    all_path, top_path, details_path = export_results_to_excel(
        results,
        top_n=10,
        details_data=trades_df,
        best_params=best_params,
        output_dir=".",
        prefix="0056_backtest",
    )

    print("Completed parameter grid search.")
    print(f"All results saved to: {all_path}")
    print(f"Top 10 results saved to: {top_path}")
    if details_path:
        print(f"Best trade details saved to: {details_path}")


if __name__ == "__main__":
    main()
